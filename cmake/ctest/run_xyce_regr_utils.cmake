# DEPRECATED: You shouldn't be making changes or updating things in
# here unless absolutely necessary. We are moving to a ctest-based
# system for running tests and moving away from run_xyce_regression

# some utilities for utilizing run_xyce_regression within a ctest
# framework
# function to execute the "run_xyce_regression" script
#    parameters:
#       1 - tag string as required by run_xyce_regression
#       2 - name of the results file to be created by run_xyce_regression
#       3 - the name of the command for the script to run. usually
#           either the binary itself, Xyce, or the mpirun command with
#           the binary
function(RUNXYCEREGRESSION my_taglist my_regr_res_fname my_xyce_cmd)

  message("executing ${XYCE_REGR_SCRIPT}...")
  if(VERBOSITY GREATER 1)
    message("[VERB2]: my_taglist = ${my_taglist}")
    message("[VERB2]: my_xyce_cmd: ${my_xyce_cmd}")
    message("[VERB2]: my_regr_res_fname: ${my_regr_res_fname}")
  endif()

  execute_process(COMMAND ${XYCE_REGR_SCRIPT}
    --output=${CTEST_BINARY_DIRECTORY}/Xyce_Regression
    --xyce_test=$ENV{WORKSPACE}/tests/Xyce_Regression
    --xyce_verify=$ENV{WORKSPACE}/tests/Xyce_Regression/TestScripts/xyce_verify.pl
    --ignoreparsewarnings
    --taglist=${my_taglist}
    --resultfile=${my_regr_res_fname}
    ${my_xyce_cmd}
    OUTPUT_VARIABLE regrOut
    ERROR_VARIABLE regrOut
    RESULT_VARIABLE xyce_reg_result)

  if(VERBOSITY GREATER 3)
    message("[VERB4]: exit status of regression script ${XYCE_REGR_SCRIPT}: ${xyce_reg_result}")
    message("[VERB4]: using xyce command: ${my_xyce_cmd}")
    message("[VERB4]: screen output from regression script ${XYCE_REGR_SCRIPT}: ${regrOut}")
  endif()

endfunction()

# function to list the contents of a specified subdirectory
#    parameters:
#       1 - full spec for directory to list
#       2 - variable in parent into which the subdirectory name as
#           specified in the TAG file, will be set
function(GETTESTSUBDIR basedirname result)

  # read the TAG file to get the current test subdirectory name
  file(READ ${basedirname}/TAG tagFileContent)
  string(REGEX REPLACE "\n" ";" tagFileContent ${tagFileContent})

  list(GET tagFileContent 0 dirname)
  if(VERBOSITY GREATER 2)
    message("[VERB3]: directory name \"${dirname}\"")
  endif()

  # set the result in the caller. note that the value of result,
  # $result, is the name of the variable in the call
  set(${result} ${dirname} PARENT_SCOPE)
endfunction()

# function to read the custom xyce test results XML file and convert it
# to a format consistent with ctest for a unified submission. at
# present this just replaces the "BuildStamp" in the custom test
# results XML file with the one generated by ctest
#    parameters:
#       1 - name of the custom xyce results file
#       2 - name of the subdirectory which ctest generated. this
#           corresponds to the BuildStamp
#       3 - the test track as used by ctest, one of Experimental,
#           Nightly, Weekly or Continuous
#       4 - the output file name, without the .xml extension which is
#           always added and a directory should not be part of this
#           name
function(CONVERTTESTXML inputfn subdirname track outfname)
  file(STRINGS ${inputfn} lines_list)
  foreach(fline ${lines_list})
    if(${fline} MATCHES "BuildStamp=\"(.*)\"")
      string(REGEX REPLACE "(.*BuildStamp=)\"(.*)\""  "\\1\"${subdirname}-${track}\"" outfline ${fline})
      list(APPEND new_line_list ${outfline})
    else()
      list(APPEND new_line_list ${fline})
    endif()
  endforeach()

  # convert the cmake list to a unified string with new lines
  string(REPLACE ";" "\n" out_contents "${new_line_list}")
  file(WRITE "${CTEST_BINARY_DIRECTORY}/Testing/${subdirname}/${outfname}.xml" ${out_contents})
endfunction()

# function to execute a Xyce executable with the "-capability" option in
# order to obtain a list of capabilities subsequently used when
# executign the run_xyce_regression script
#    parameters:
#       1 - the full path to the Xyce binary to run
function(GET_XYCE_CAPABILITIES xyce_exe)

  # execute Xyce with the "-capabilities" option
  execute_process(COMMAND ${xyce_exe} -capabilities
    RESULT_VARIABLE res_ret
    OUTPUT_VARIABLE term_cap_out
    ERROR_VARIABLE term_cap_out)

  # if the execution fails
  if(NOT ${res_ret} EQUAL 0)
    message("ERROR: when querying Xyce capabilities. Error output:")
    message(FATAL_ERROR "error trying to query ${xyce_exe}. Output was: ${term_cap_out}")
  endif()

  # build up the tag list according to the output of the query. each
  # of the following is making a correspondence between a line output
  # by "Xyce -capabilities" and a tag to use when invoking
  # run_xyce_regression.
  string(FIND "${term_cap_out}" "Parallel with MPI" res_var)
  if(${res_var} EQUAL -1)
    set(myTagList "+serial?klu")
  else()
    set(myTagList "+parallel")
  endif()
  if("$ENV{TESTSET}" STREQUAL "Weekly"
      OR "$ENV{TESTSET}" STREQUAL "QA"
      OR "$ENV{TESTSET}" STREQUAL "FINAL")

    set(myTagList "${myTagList}?weekly?nightly")
  else()
    set(myTagList "${myTagList}+nightly")
  endif()

  string(FIND "${term_cap_out}" "Verbose" res_var)
  if(${res_var} EQUAL -1)
    set(myTagList "${myTagList}-verbose?noverbose")
  else()
    set(myTagList "${myTagList}?verbose-noverbose")
  endif()

  string(FIND "${term_cap_out}" "Non-Free device models" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?nonfree")
  else()
    set(myTagList "${myTagList}-nonfree")
  endif()

  string(FIND "${term_cap_out}" "Radiation models" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?rad")
    string(FIND "${term_cap_out}" "Reaction parser" res_var)
    if(NOT ${res_var} EQUAL -1)
      set(myTagList "${myTagList}?qaspr")
    endif()
  else()
    set(myTagList "${myTagList}-rad")
  endif()

  string(FIND "${term_cap_out}" "ATHENA" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?athena")
  endif()

  string(FIND "${term_cap_out}" "FFT" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?fft")
  endif()

  string(FIND "${term_cap_out}" "C++14" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?cxx14")
  endif()

  string(FIND "${term_cap_out}" "Stokhos enabled" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?stokhos")
  endif()

  string(FIND "${term_cap_out}" "ROL enabled" res_var)
  if(NOT ${res_var} EQUAL -1)
    set(myTagList "${myTagList}?rol")
  endif()

  string(REGEX MATCH "Amesos2.*Basker.*enabled" out_var "${term_cap_out}")
  if(out_var)
    set(myTagList "${myTagList}?amesos2basker")
  endif()

  string(REGEX MATCH "Amesos2.*KLU2.*enabled" out_var "${term_cap_out}")
  if(out_var)
    set(myTagList "${myTagList}?amesos2klu")
  endif()

  find_program(XDMBDLEXE NAMES xdm_bdl)
  if(NOT ${XDMBDLEXE} STREQUAL "XDMBDLEXE-NOTFOUND")
    set(myTagList "${myTagList}?xdm")
  endif()

  if(NOT "${RXR_APPEND_TAGS}" STREQUAL "")
    set(myTagList "${myTagList}${RXR_APPEND_TAGS}")
  endif()

  # set parent TAGLIST from function-local variable
  set(TAGLIST "${myTagList}" PARENT_SCOPE)

endfunction()

